mapping = _{ SOI ~ statement ~ (NEWLINE+ ~ statement)* ~ NEWLINE* ~ EOI }

statement = _{ assignment | deletion }

assignment = { target_path ~ "=" ~ query_expression }

// Paths
path_segment = @{ ('a'..'z' | 'A'..'Z' | "_" | "-" )+ ~ ( "[" ~ ('0'..'9')+ ~ "]" )? }

target_path = @{ ("." ~ path_segment)+ }

// Queries
path_coalesce = !{ "(" ~ path_segment ~ ("|" ~ path_segment)+ ~ ")" }

dot_path = ${ ("." ~ (path_segment | path_coalesce))+ }

deletion = ${ "del(" ~ dot_path ~ ")" }

// NOTE: Not including delete here yet, but there's no reason we can't slot it
// in at some point and get `.nested = del(.foo)`.
query = _{ value | dot_path | group }

query_expression = _{ query ~ (arithmetic_operator ~ query)* }

group = { "(" ~ query_expression ~ ")" }

value = _{ string | number | boolean | null }

boolean = { "true" | "false" }

null = { "null" }

string = ${ "\"" ~ inner ~ "\"" }
inner = @{ char* }
char = {
    !("\"" | "\\") ~ ANY
    | "\\" ~ ("\"" | "\\" | "n" | "t")
    // TODO: Eventually expand this to allow more escape sequences.
    // | "\\" ~ ("\"" | "\\" | "/" | "b" | "f" | "n" | "r" | "t")
    // | "\\" ~ ("u" ~ ASCII_HEX_DIGIT{4})
}

number = @{
    "-"?
    ~ ("0" | ASCII_NONZERO_DIGIT ~ ASCII_DIGIT*)
    ~ ("." ~ ASCII_DIGIT*)?
    ~ (^"e" ~ ("+" | "-")? ~ ASCII_DIGIT+)?
}

arithmetic_operator = { "+" | "-" | "*" | "/" | "%" }

WHITESPACE = _{ " " | "\t" }